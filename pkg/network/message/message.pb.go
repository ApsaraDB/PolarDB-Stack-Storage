/*
*Copyright (c) 2019-2021, Alibaba Group Holding Limited;
*Licensed under the Apache License, Version 2.0 (the "License");
*you may not use this file except in compliance with the License.
*You may obtain a copy of the License at

*   http://www.apache.org/licenses/LICENSE-2.0

*Unless required by applicable law or agreed to in writing, software
*distributed under the License is distributed on an "AS IS" BASIS,
*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*See the License for the specific language governing permissions and
*limitations under the License.
 */

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: message.proto

package message

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SmsMessageHead_SmsMsgType int32

const (
	SmsMessageHead_ACK                  SmsMessageHead_SmsMsgType = 0
	SmsMessageHead_CMD_PR_EXEC_REQ      SmsMessageHead_SmsMsgType = 10
	SmsMessageHead_CMD_PR_EXEC_RESP     SmsMessageHead_SmsMsgType = 11
	SmsMessageHead_CMD_PR_BATCH_REQ     SmsMessageHead_SmsMsgType = 20
	SmsMessageHead_CMD_PR_BATCH_RESP    SmsMessageHead_SmsMsgType = 21
	SmsMessageHead_CMD_DM_CREAT_REQ     SmsMessageHead_SmsMsgType = 100
	SmsMessageHead_CMD_DM_CREAT_RESP    SmsMessageHead_SmsMsgType = 101
	SmsMessageHead_CMD_DM_UPDATE_REQ    SmsMessageHead_SmsMsgType = 102
	SmsMessageHead_CMD_DM_UPDATE_RESP   SmsMessageHead_SmsMsgType = 103
	SmsMessageHead_CMD_DM_DELETE_REQ    SmsMessageHead_SmsMsgType = 104
	SmsMessageHead_CMD_DM_DELETE_RESP   SmsMessageHead_SmsMsgType = 105
	SmsMessageHead_CMD_RESCAN_REQ       SmsMessageHead_SmsMsgType = 300
	SmsMessageHead_CMD_RESCAN_RESP      SmsMessageHead_SmsMsgType = 301
	SmsMessageHead_CMD_EXPAND_FS_REQ    SmsMessageHead_SmsMsgType = 400
	SmsMessageHead_CMD_EXPAND_FS_RESP   SmsMessageHead_SmsMsgType = 401
	SmsMessageHead_CMD_FORMAT_FS_REQ    SmsMessageHead_SmsMsgType = 500
	SmsMessageHead_CMD_FORMAT_FS_RESP   SmsMessageHead_SmsMsgType = 501
	SmsMessageHead_CMD_LUN_CREATE_REQ   SmsMessageHead_SmsMsgType = 600
	SmsMessageHead_CMD_LUN_CREATE_RESP  SmsMessageHead_SmsMsgType = 601
	SmsMessageHead_CMD_LUN_EXPAND_REQ   SmsMessageHead_SmsMsgType = 700
	SmsMessageHead_CMD_LUN_EXPAND_RESP  SmsMessageHead_SmsMsgType = 701
	SmsMessageHead_CMD_PVC_CREATE_REQ   SmsMessageHead_SmsMsgType = 800
	SmsMessageHead_CMD_PVC_CREATE_RESP  SmsMessageHead_SmsMsgType = 801
	SmsMessageHead_CMD_PVC_RELEASE_REQ  SmsMessageHead_SmsMsgType = 900
	SmsMessageHead_CMD_PVC_RELEASE_RESP SmsMessageHead_SmsMsgType = 901
	SmsMessageHead_DUMMY_REQ            SmsMessageHead_SmsMsgType = 10000
	SmsMessageHead_DUMMY_RESP           SmsMessageHead_SmsMsgType = 10001
)

// Enum value maps for SmsMessageHead_SmsMsgType.
var (
	SmsMessageHead_SmsMsgType_name = map[int32]string{
		0:     "ACK",
		10:    "CMD_PR_EXEC_REQ",
		11:    "CMD_PR_EXEC_RESP",
		20:    "CMD_PR_BATCH_REQ",
		21:    "CMD_PR_BATCH_RESP",
		100:   "CMD_DM_CREAT_REQ",
		101:   "CMD_DM_CREAT_RESP",
		102:   "CMD_DM_UPDATE_REQ",
		103:   "CMD_DM_UPDATE_RESP",
		104:   "CMD_DM_DELETE_REQ",
		105:   "CMD_DM_DELETE_RESP",
		300:   "CMD_RESCAN_REQ",
		301:   "CMD_RESCAN_RESP",
		400:   "CMD_EXPAND_FS_REQ",
		401:   "CMD_EXPAND_FS_RESP",
		500:   "CMD_FORMAT_FS_REQ",
		501:   "CMD_FORMAT_FS_RESP",
		600:   "CMD_LUN_CREATE_REQ",
		601:   "CMD_LUN_CREATE_RESP",
		700:   "CMD_LUN_EXPAND_REQ",
		701:   "CMD_LUN_EXPAND_RESP",
		800:   "CMD_PVC_CREATE_REQ",
		801:   "CMD_PVC_CREATE_RESP",
		900:   "CMD_PVC_RELEASE_REQ",
		901:   "CMD_PVC_RELEASE_RESP",
		10000: "DUMMY_REQ",
		10001: "DUMMY_RESP",
	}
	SmsMessageHead_SmsMsgType_value = map[string]int32{
		"ACK":                  0,
		"CMD_PR_EXEC_REQ":      10,
		"CMD_PR_EXEC_RESP":     11,
		"CMD_PR_BATCH_REQ":     20,
		"CMD_PR_BATCH_RESP":    21,
		"CMD_DM_CREAT_REQ":     100,
		"CMD_DM_CREAT_RESP":    101,
		"CMD_DM_UPDATE_REQ":    102,
		"CMD_DM_UPDATE_RESP":   103,
		"CMD_DM_DELETE_REQ":    104,
		"CMD_DM_DELETE_RESP":   105,
		"CMD_RESCAN_REQ":       300,
		"CMD_RESCAN_RESP":      301,
		"CMD_EXPAND_FS_REQ":    400,
		"CMD_EXPAND_FS_RESP":   401,
		"CMD_FORMAT_FS_REQ":    500,
		"CMD_FORMAT_FS_RESP":   501,
		"CMD_LUN_CREATE_REQ":   600,
		"CMD_LUN_CREATE_RESP":  601,
		"CMD_LUN_EXPAND_REQ":   700,
		"CMD_LUN_EXPAND_RESP":  701,
		"CMD_PVC_CREATE_REQ":   800,
		"CMD_PVC_CREATE_RESP":  801,
		"CMD_PVC_RELEASE_REQ":  900,
		"CMD_PVC_RELEASE_RESP": 901,
		"DUMMY_REQ":            10000,
		"DUMMY_RESP":           10001,
	}
)

func (x SmsMessageHead_SmsMsgType) Enum() *SmsMessageHead_SmsMsgType {
	p := new(SmsMessageHead_SmsMsgType)
	*p = x
	return p
}

func (x SmsMessageHead_SmsMsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SmsMessageHead_SmsMsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[0].Descriptor()
}

func (SmsMessageHead_SmsMsgType) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[0]
}

func (x SmsMessageHead_SmsMsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SmsMessageHead_SmsMsgType.Descriptor instead.
func (SmsMessageHead_SmsMsgType) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0, 0}
}

type MessageBody_Status int32

const (
	MessageBody_Success MessageBody_Status = 0
	MessageBody_Fail    MessageBody_Status = 1
)

// Enum value maps for MessageBody_Status.
var (
	MessageBody_Status_name = map[int32]string{
		0: "Success",
		1: "Fail",
	}
	MessageBody_Status_value = map[string]int32{
		"Success": 0,
		"Fail":    1,
	}
)

func (x MessageBody_Status) Enum() *MessageBody_Status {
	p := new(MessageBody_Status)
	*p = x
	return p
}

func (x MessageBody_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageBody_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[1].Descriptor()
}

func (MessageBody_Status) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[1]
}

func (x MessageBody_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageBody_Status.Descriptor instead.
func (MessageBody_Status) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{1, 0}
}

type SmsMessageHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgType      SmsMessageHead_SmsMsgType `protobuf:"varint,1,opt,name=msgType,proto3,enum=message.SmsMessageHead_SmsMsgType" json:"msgType,omitempty"`
	MsgId        string                    `protobuf:"bytes,2,opt,name=msgId,proto3" json:"msgId,omitempty"`
	MsgLen       int32                     `protobuf:"varint,3,opt,name=msgLen,proto3" json:"msgLen,omitempty"`
	AckMsgId     string                    `protobuf:"bytes,4,opt,name=ackMsgId,proto3" json:"ackMsgId,omitempty"`
	TraceContext map[string]string         `protobuf:"bytes,5,rep,name=traceContext,proto3" json:"traceContext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SmsMessageHead) Reset() {
	*x = SmsMessageHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmsMessageHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsMessageHead) ProtoMessage() {}

func (x *SmsMessageHead) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsMessageHead.ProtoReflect.Descriptor instead.
func (*SmsMessageHead) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

func (x *SmsMessageHead) GetMsgType() SmsMessageHead_SmsMsgType {
	if x != nil {
		return x.MsgType
	}
	return SmsMessageHead_ACK
}

func (x *SmsMessageHead) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

func (x *SmsMessageHead) GetMsgLen() int32 {
	if x != nil {
		return x.MsgLen
	}
	return 0
}

func (x *SmsMessageHead) GetAckMsgId() string {
	if x != nil {
		return x.AckMsgId
	}
	return ""
}

func (x *SmsMessageHead) GetTraceContext() map[string]string {
	if x != nil {
		return x.TraceContext
	}
	return nil
}

type MessageBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecStatus MessageBody_Status `protobuf:"varint,1,opt,name=execStatus,proto3,enum=message.MessageBody_Status" json:"execStatus,omitempty"`
	ErrMsg     string             `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	Content    []byte             `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *MessageBody) Reset() {
	*x = MessageBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageBody) ProtoMessage() {}

func (x *MessageBody) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageBody.ProtoReflect.Descriptor instead.
func (*MessageBody) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{1}
}

func (x *MessageBody) GetExecStatus() MessageBody_Status {
	if x != nil {
		return x.ExecStatus
	}
	return MessageBody_Success
}

func (x *MessageBody) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *MessageBody) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type SmsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head *SmsMessageHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Body *MessageBody    `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SmsMessage) Reset() {
	*x = SmsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsMessage) ProtoMessage() {}

func (x *SmsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsMessage.ProtoReflect.Descriptor instead.
func (*SmsMessage) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{2}
}

func (x *SmsMessage) GetHead() *SmsMessageHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *SmsMessage) GetBody() *MessageBody {
	if x != nil {
		return x.Body
	}
	return nil
}

var File_message_proto protoreflect.FileDescriptor

var file_message_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9f, 0x07, 0x0a, 0x0e, 0x53, 0x6d, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x3c, 0x0a, 0x07, 0x6d,
	0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6d, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x2e, 0x53, 0x6d, 0x73, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x4c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6d, 0x73, 0x67, 0x4c, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x6b, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x6b, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x53, 0x6d, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x1a, 0x3f, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xf4, 0x04, 0x0a, 0x0a, 0x53, 0x6d, 0x73, 0x4d, 0x73, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x43, 0x4b, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x4d, 0x44, 0x5f, 0x50, 0x52, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x0a,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x4d, 0x44, 0x5f, 0x50, 0x52, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4d, 0x44, 0x5f, 0x50, 0x52,
	0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x14, 0x12, 0x15, 0x0a, 0x11,
	0x43, 0x4d, 0x44, 0x5f, 0x50, 0x52, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x53,
	0x50, 0x10, 0x15, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4d, 0x44, 0x5f, 0x44, 0x4d, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x64, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4d, 0x44,
	0x5f, 0x44, 0x4d, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x65,
	0x12, 0x15, 0x0a, 0x11, 0x43, 0x4d, 0x44, 0x5f, 0x44, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x66, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4d, 0x44, 0x5f, 0x44,
	0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x67, 0x12,
	0x15, 0x0a, 0x11, 0x43, 0x4d, 0x44, 0x5f, 0x44, 0x4d, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x5f, 0x52, 0x45, 0x51, 0x10, 0x68, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4d, 0x44, 0x5f, 0x44, 0x4d,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x69, 0x12, 0x13,
	0x0a, 0x0e, 0x43, 0x4d, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x52, 0x45, 0x51,
	0x10, 0xac, 0x02, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4d, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x43, 0x41,
	0x4e, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0xad, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x4d, 0x44,
	0x5f, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x44, 0x5f, 0x46, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x90,
	0x03, 0x12, 0x17, 0x0a, 0x12, 0x43, 0x4d, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x44, 0x5f,
	0x46, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x91, 0x03, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x4d,
	0x44, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x46, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x10,
	0xf4, 0x03, 0x12, 0x17, 0x0a, 0x12, 0x43, 0x4d, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x5f, 0x46, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0xf5, 0x03, 0x12, 0x17, 0x0a, 0x12, 0x43,
	0x4d, 0x44, 0x5f, 0x4c, 0x55, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45,
	0x51, 0x10, 0xd8, 0x04, 0x12, 0x18, 0x0a, 0x13, 0x43, 0x4d, 0x44, 0x5f, 0x4c, 0x55, 0x4e, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0xd9, 0x04, 0x12, 0x17,
	0x0a, 0x12, 0x43, 0x4d, 0x44, 0x5f, 0x4c, 0x55, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x44,
	0x5f, 0x52, 0x45, 0x51, 0x10, 0xbc, 0x05, 0x12, 0x18, 0x0a, 0x13, 0x43, 0x4d, 0x44, 0x5f, 0x4c,
	0x55, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0xbd,
	0x05, 0x12, 0x17, 0x0a, 0x12, 0x43, 0x4d, 0x44, 0x5f, 0x50, 0x56, 0x43, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xa0, 0x06, 0x12, 0x18, 0x0a, 0x13, 0x43, 0x4d,
	0x44, 0x5f, 0x50, 0x56, 0x43, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x53,
	0x50, 0x10, 0xa1, 0x06, 0x12, 0x18, 0x0a, 0x13, 0x43, 0x4d, 0x44, 0x5f, 0x50, 0x56, 0x43, 0x5f,
	0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x84, 0x07, 0x12, 0x19,
	0x0a, 0x14, 0x43, 0x4d, 0x44, 0x5f, 0x50, 0x56, 0x43, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x85, 0x07, 0x12, 0x0e, 0x0a, 0x09, 0x44, 0x55, 0x4d,
	0x4d, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x90, 0x4e, 0x12, 0x0f, 0x0a, 0x0a, 0x44, 0x55, 0x4d,
	0x4d, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x91, 0x4e, 0x22, 0x9d, 0x01, 0x0a, 0x0b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x3b, 0x0a, 0x0a, 0x65, 0x78,
	0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x6f, 0x64, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x65, 0x78, 0x65,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x1f, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x01, 0x22, 0x63, 0x0a, 0x0a, 0x53, 0x6d,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x53, 0x6d, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52,
	0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_message_proto_rawDescOnce sync.Once
	file_message_proto_rawDescData = file_message_proto_rawDesc
)

func file_message_proto_rawDescGZIP() []byte {
	file_message_proto_rawDescOnce.Do(func() {
		file_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_message_proto_rawDescData)
	})
	return file_message_proto_rawDescData
}

var file_message_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_message_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_message_proto_goTypes = []interface{}{
	(SmsMessageHead_SmsMsgType)(0), // 0: message.SmsMessageHead.SmsMsgType
	(MessageBody_Status)(0),        // 1: message.MessageBody.Status
	(*SmsMessageHead)(nil),         // 2: message.SmsMessageHead
	(*MessageBody)(nil),            // 3: message.MessageBody
	(*SmsMessage)(nil),             // 4: message.SmsMessage
	nil,                            // 5: message.SmsMessageHead.TraceContextEntry
}
var file_message_proto_depIdxs = []int32{
	0, // 0: message.SmsMessageHead.msgType:type_name -> message.SmsMessageHead.SmsMsgType
	5, // 1: message.SmsMessageHead.traceContext:type_name -> message.SmsMessageHead.TraceContextEntry
	1, // 2: message.MessageBody.execStatus:type_name -> message.MessageBody.Status
	2, // 3: message.SmsMessage.head:type_name -> message.SmsMessageHead
	3, // 4: message.SmsMessage.body:type_name -> message.MessageBody
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_message_proto_init() }
func file_message_proto_init() {
	if File_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmsMessageHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_message_proto_goTypes,
		DependencyIndexes: file_message_proto_depIdxs,
		EnumInfos:         file_message_proto_enumTypes,
		MessageInfos:      file_message_proto_msgTypes,
	}.Build()
	File_message_proto = out.File
	file_message_proto_rawDesc = nil
	file_message_proto_goTypes = nil
	file_message_proto_depIdxs = nil
}
